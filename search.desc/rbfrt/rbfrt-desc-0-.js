searchState.loadedDescShard("rbfrt", 0, "This crate implements an interface to a P4-programmable …\nRepresents the connection between the switch and the …\nA builder to create the SwitchConnection between the …\nCreates a new SwitchConnectionBuilder to build the …\nDeletes all entries in a table.\nDeletes all entries in multiple tables.\nSets the <code>client id</code> of the controller for this …\nSets the path to the <code>config file</code> of the program to load …\nCreates the SwitchConnection between the switch and …\nDeletes multiple entries in one or multiple tables.\nDeletes a entry in a table.\nSets the <code>device id</code> of the switch for this SwitchConnection.\nQueue containing all digests of the connected switch.\nExecutes a table operation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads the values of multiple registers or indices.\nReads the value of a register.\nRetrieves the entries of a single table.\nRetrieves the entries of multiple tables.\nChecks if the switch has a table with the specified <code>name</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the <code>P4 program name</code> running on the switch.\nUpdates multiple entries in one or multiple tables.\nUpdates a single entry in a table.\nWrites values into multiple registers or indices.\nWrites a value into a register.\nWrites a entries into one or multiple tables.\nWrites a single entry into a table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegister index type.\nRepresents a register that may contain values at several …\nRepresents a register entry at a specific index\nRepresents a register request\nSets the <code>value</code> for the specified <code>name</code> in the register’s …\nReturns all <code>entries</code> of the register\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an RegisterEntry at a specific <code>index</code> of the …\nReturns the data field with the specified <code>name</code>.\nReturns all data of the register entry.\nReturns the data to set through the Request.\nReturns the <code>index</code> of the register entry.\nReturns the register’s <code>index</code> in the Request.\nReturns the register’s <code>name</code> of the Request.\nReturns a new Request with the updated IndexType.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>name</code> of the register\nCreates a new Register with the provided <code>name</code> and <code>entries</code>.\nCreates a new Request for the register with the given <code>name</code>.\nParse TableEntries into RegisterEntries and creates a …\nRepresents data associated with an action.\nRepresents data associated with an action.\nRepresents a match value.\nRepresents request to write, update, or delete a TableEntry…\nRepresents a table entry.\nRepresents all possible table operations.\nConverts internal data representation to vector of bytes.\nSets the action name.\nName of the associated action\nAdds the associated ActionData.\nAction data of the action, empty if not parameters are …\nAdds the associated ActionDataRepeated.\nReturns the data as an u32.\nSets if the TableEntry specified by this Request has to be …\nFlag indicating if this is the default entry for the table.\nCreates a new Exact match value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the ActionData which key has the given <code>name</code>.\nReturns the associated ActionData.\nReturns associated the ActionDataRepeated.\nReturns the action’s name.\nReturns the action’s name.\nReturns the <code>data</code> associated with the <code>key</code>.\nReturns the <code>data</code> associated with the <code>key</code>.\nReturns the <code>key</code> mapped to the <code>data</code>.\nReturns the <code>key</code> mapped to the <code>data</code>.\nReturns the MatchValue of the match key with the given <code>name</code>…\nReturns all match keys.\nReturns the TableOperation.\nReturns the Request’s pipe for which the\nReturns the table’s name.\nReturns if an action is specified in the Request.\nReturns whether an action data has a key with the given …\nReturns whether a match key with the given <code>name</code> is present.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the TableEntry specified by this Request is set …\nCreates a new LPM match value\nAdds a match key to the list of match keys.\nReplaces the list of the match keys with the provided …\nNames and their values of the match keys.\nCreates a new ActionData mapping the <code>key</code> to the <code>data</code>.\nCreates a new ActionDataRepeated mapping the <code>key</code> to the …\nCreates a new empty table Request for a table with the …\nSets the TableOperation.\nSets the pipe the Request is for.\nCreates a new Range match value\nId of the table.\nName of the table.\nName of the table.\nCreates a new Ternary match value\nAll possible auto negotiation options for a Port.\nLoopback from ingress to egress of the same Port.\nLoopback from egress to ingress of the same Port.\nNo loopback.\nRepresents a digest/message sent from the switch to the …\nAll possible forward error correction options for a Port.\nAll possible loopback options for a Port.\nRepresents a port of the switch.\nManager to add, update, delete, … Ports of the connected …\nPrettyPrinter to display tables and their entries.\nAll possible Port speeds to configure.\nConfigures the provided Port.\nConfigures all provided Ports.\nSets the auto negotiation.\nDeletes all configured Ports.\nThe data contained in the Digest. It contains the mapping …\nDeletes the Port with the specified frontpanel port number.\nMaps the frontpanel port to the switch interal <code>dev_port</code>.\nDisables the Port.\nDisables the Port with the provided frontpanel port number.\nEnables the Port.\nEnables the Port with the provided frontpanel port number.\nSets the forward error correction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a tuple <code>(frontpanel port, channel)</code> of the provided …\nReturns the configured auto negotiation.\nReturns the <code>dev_port</code> of the frontpanel <code>port</code> number.\nReturns if the Port is enabled.\nReturns the configured forward error correction.\nReturns a tuple <code>(port, channel)</code> of the frontpanel port.\nReturns if the <code>infer_address_type_flag</code> is set.\nReturns the configured loopback mode.\nReturns a list of all configured ports of the connected …\nReturns the configured speed.\nSets the <code>infer_address_type_flag</code>. If the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the loopback mode.\nName of the Digest instance used in the P4 program.\nCreates a new <code>default</code> PrettyPrinter\nCreates a new Port with the provided frontpanel <code>port</code> …\nPrettyprint all given <code>entries</code> as tables. Table entries …\nSets the speed.\nDeletes the already configured Port and adds it with the …")